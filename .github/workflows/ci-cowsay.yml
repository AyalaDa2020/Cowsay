name: ci-cowsay
on: [push, workflow_dispatch]

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      IMAGE_NAME: cowsay
      TAG: ${{ github.sha }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN:   ${{ secrets.DOCKERHUB_TOKEN }}
      AWS_ACCOUNT_ID:    ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION:        ${{ secrets.AWS_REGION }}
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}

    steps:
      - uses: actions/checkout@v4

      # 1) Build
      - name: Build image
        run: docker build -t $IMAGE_NAME:$TAG -t $IMAGE_NAME:latest .

      # 2) Run & Test (פשוט: לוודא שהקונטיינר נשאר רץ)
      - name: Smoke test (container stays up)
        timeout-minutes: 2
        run: |
          set -euo pipefail
          CID=$(docker run -d -e PORT=8080 -p 8080:8080 "$IMAGE_NAME:$TAG")
          trap 'docker rm -f "$CID" >/dev/null 2>&1 || true' EXIT
          sleep 5
          # נכשל אם הקונטיינר לא רץ
          test -n "$(docker ps -q --filter "id=$CID" --filter "status=running")"

      # 3) Package
      - name: Package image
        run: docker save $IMAGE_NAME:$TAG | gzip > image.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-image
          path: image.tar.gz
          retention-days: 7

      # 4) Publish (רק אם יש סודות ועל main)
      - name: Login & push to Docker Hub
        if: ${{ github.ref == 'refs/heads/main' && env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        run: |
          echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          docker tag $IMAGE_NAME:$TAG "$DOCKERHUB_USERNAME/$IMAGE_NAME:latest"
          docker push "$DOCKERHUB_USERNAME/$IMAGE_NAME:latest"

      - name: Configure AWS (OIDC)
        if: ${{ github.ref == 'refs/heads/main' && env.AWS_REGION != '' && env.AWS_ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}

      - name: Login & push to ECR
        if: ${{ github.ref == 'refs/heads/main' && env.AWS_ACCOUNT_ID != '' && env.AWS_REGION != '' && env.AWS_ROLE_TO_ASSUME != '' }}
        run: |
          REPO=$IMAGE_NAME
          REG="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
          aws ecr describe-repositories --repository-names "$REPO" >/dev/null 2>&1 || aws ecr create-repository --repository-name "$REPO" >/dev/null
          aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$REG"
          docker tag $IMAGE_NAME:$TAG "$REG/$REPO:latest"
          docker push "$REG/$REPO:latest"
