name: cowsay-ci
on: [push, workflow_dispatch]

env:
  IMAGE_NAME: cowsay
  IMAGE_TAG: latest
  PORT: 8080

jobs:
  build_and_package:
    name: Build & Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        run: docker build -t "$IMAGE_NAME:$IMAGE_TAG" .

      - name: Verify image exists
        run: docker image inspect "$IMAGE_NAME:$IMAGE_TAG" >/dev/null

      - name: Save image as artifact
        run: docker save "$IMAGE_NAME:$IMAGE_TAG" -o image.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tar
          path: image.tar
          retention-days: 7

  run_and_test:
    name: Run & Test
    needs: build_and_package
    runs-on: ubuntu-latest
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tar

      - name: Load image
        run: docker load -i image.tar

      - name: Start container
        run: |
          CID=$(docker run -d -e PORT="$PORT" -p "$PORT:$PORT" "$IMAGE_NAME:$IMAGE_TAG")
          echo "$CID" > cid.txt

      - name: Wait for app to be ready (sleep)
        run: sleep 5

      - name: Health check with curl
        run: |
          set -euo pipefail
          curl -fsS "http://127.0.0.1:${PORT}/" | tee /tmp/out.txt
          test -s /tmp/out.txt

      - name: Stop container
        if: always()
        run: |
          CID=$(cat cid.txt)
          docker rm -f "$CID" >/dev/null 2>&1 || true

  publish:
    name: Publish (Docker Hub)
    needs: run_and_test
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN:   ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tar

      - name: Load image
        run: docker load -i image.tar

      - name: Login to Docker Hub (skip if no secrets)
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        run: echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Tag & Push :latest
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        run: |
          docker tag "$IMAGE_NAME:$IMAGE_TAG" "$DOCKERHUB_USERNAME/$IMAGE_NAME:latest"
          docker push "$DOCKERHUB_USERNAME/$IMAGE_NAME:latest"

      - name: Verify published image (manifest)
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        run: docker manifest inspect "$DOCKERHUB_USERNAME/$IMAGE_NAME:latest" >/dev/null
